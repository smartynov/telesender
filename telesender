#!/usr/bin/env python3

import sys
import argparse
import asyncio
from telethon import TelegramClient, errors
import os
import tempfile
import subprocess
import shutil

# Global variables to track ffmpeg availability
ffmpeg_checked = False
ffmpeg_available = False

def message_generator():
    buffer = ''
    for line in sys.stdin:
        line = line.rstrip('\n')
        if line.strip() == '' and buffer == '':
            continue  # Skip empty lines
        if buffer != '':
            buffer += '\n' + line
        else:
            buffer = line
        # Check if quotes are balanced
        if quotes_balanced(buffer):
            yield buffer
            buffer = ''
    if buffer != '':
        yield buffer

def quotes_balanced(s):
    count = 0
    escaped = False
    for c in s:
        if escaped:
            escaped = False
        elif c == '\\':
            escaped = True
        elif c == '"':
            count += 1
    return count % 2 == 0

def split_message_line(line):
    tokens = []
    current = ''
    in_quotes = False
    escape = False
    for c in line:
        if escape:
            current += c
            escape = False
        elif c == '\\':
            escape = True
        elif c == '"':
            current += c
            in_quotes = not in_quotes
        elif c == ':' and not in_quotes:
            tokens.append(current)
            current = ''
        else:
            current += c
    tokens.append(current)
    return tokens

def parse_message_line(message_line):
    tokens = split_message_line(message_line)
    msg_type = 'text'
    file_path = None
    content = ''

    if len(tokens) == 1:
        content = tokens[0]
    elif len(tokens) == 2:
        msg_type = tokens[0].strip().lower()
        content = tokens[1]
        if msg_type in ['photo', 'video', 'file']:
            file_path = content
            content = ''
    elif len(tokens) >= 3:
        msg_type = tokens[0].strip().lower()
        file_path = tokens[1]
        content = ':'.join(tokens[2:])
    else:
        content = message_line

    # Clean up content
    content = content.strip()
    if content.startswith('"') and content.endswith('"') and len(content) >= 2:
        content = content[1:-1]
    elif content.startswith('"'):
        content = content[1:]
    elif content.endswith('"'):
        content = content[:-1]
    content = content.replace('\\"', '"')

    return msg_type, file_path, content

async def send_message(client, entity, message_line):
    message_line = message_line.strip()
    if not message_line:
        return  # Skip empty messages

    msg_type, file_path, content = parse_message_line(message_line)

    # Use global variables to track ffmpeg availability
    global ffmpeg_checked
    global ffmpeg_available

    # Process the message
    try:
        if msg_type == 'video':
            caption = content if content else None

            # Check ffmpeg availability upon first video message
            if not ffmpeg_checked:
                ffmpeg_checked = True
                if shutil.which('zffmpeg'):
                    ffmpeg_available = True
                else:
                    ffmpeg_available = False
                    print(
                        "Warning: 'ffmpeg' is not installed or not in the system's PATH. "
                        "Video thumbnails will not be generated. "
                        "Install 'ffmpeg' to enable thumbnail generation.",
                        file=sys.stderr
                    )

            if ffmpeg_available:
                # Generate thumbnail
                thumb_path = generate_thumbnail(file_path)
            else:
                thumb_path = None

            await client.send_file(
                entity,
                file_path,
                caption=caption,
                supports_streaming=True,
                thumb=thumb_path
            )

            # Clean up the thumbnail file
            if thumb_path and os.path.exists(thumb_path):
                os.remove(thumb_path)

        elif msg_type == 'photo':
            caption = content if content else None
            await client.send_file(entity, file_path, caption=caption)
        elif msg_type == 'text':
            await client.send_message(entity, content, parse_mode=None)
        elif msg_type == 'markdown':
            await client.send_message(entity, content, parse_mode='markdown')
        elif msg_type == 'file':
            caption = content if content else None
            await client.send_file(entity, file_path, caption=caption)
        else:
            print(f"Unknown message type: {msg_type}", file=sys.stderr)
    except Exception as e:
        print(f"Failed to send message: {e}", file=sys.stderr)

def generate_thumbnail(video_path):
    try:
        # Use a temporary file for the thumbnail
        thumb_fd, thumb_path = tempfile.mkstemp(suffix='.jpg')
        os.close(thumb_fd)
        # Generate thumbnail using ffmpeg
        cmd = [
            'ffmpeg',
            '-i', video_path,
            '-ss', '00:00:01.000',
            '-vframes', '1',
            '-q:v', '2',
            '-vf', 'scale=320:-1',
            '-y',
            thumb_path
        ]
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True,
            text=True
        )
        return thumb_path
    except subprocess.CalledProcessError as e:
        print(f"Failed to generate thumbnail: {e.stderr}", file=sys.stderr)
        return None
    except Exception as e:
        print(f"Failed to generate thumbnail: {e}", file=sys.stderr)
        return None

async def list_chats(client):
    async for dialog in client.iter_dialogs():
        try:
            print(f"{dialog.id}: {dialog.name}")
        except AttributeError:
            pass  # Skip if chat has no name

async def send_messages(client, args):
    try:
        if args.chat_id:
            entity = await client.get_entity(int(args.chat_id))
        else:
            print("Error: --chat-id is required unless using --list-chats.", file=sys.stderr)
            sys.exit(1)
    except ValueError:
        print("Invalid chat ID. Please provide a valid integer.", file=sys.stderr)
        sys.exit(1)
    except errors.RPCError as e:
        print(f"Error fetching chat entity: {e}", file=sys.stderr)
        sys.exit(1)

    async for message in async_message_processor(message_generator()):
        await send_message(client, entity, message)

async def async_message_processor(generator):
    for message in generator:
        yield message

def main():
    parser = argparse.ArgumentParser(description='Send messages to Telegram chats.')
    parser.add_argument('--api-id', required=True, help='Telegram API ID')
    parser.add_argument('--api-hash', required=True, help='Telegram API Hash')
    parser.add_argument('--chat-id', help='Target chat ID')
    parser.add_argument('--list-chats', action='store_true', help='List recent chats')
    args = parser.parse_args()

    async def run():
        # Use the client as an asynchronous context manager
        async with TelegramClient('telesender', int(args.api_id), args.api_hash) as client:
            if args.list_chats:
                await list_chats(client)
            else:
                await send_messages(client, args)

    try:
        asyncio.run(run())
    except KeyboardInterrupt:
        print("Interrupted by user.", file=sys.stderr)
        sys.exit(1)
    except errors.RPCError as e:
        print(f"Telegram API error: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()

